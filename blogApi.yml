openapi: "3.0.2"
info:
  title: Blog Api
  version: "1.0"
servers:
  - url: https://proud-teal-snail.cyclic.app

tags:
  - name: Auth
    description: Authentication for accessing the Website
  - name: Setting
    description: Changing configuration of using this api.
  - name: User
    description: "User actions api."
  - name: Article
    description: All articles related actions api.
paths:
  "/auth/signup":
    post:
      description: Sign up as a new user
      tags:
        - Auth
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: Ataur
                lastName:
                  type: string
                  example: Rahman
                email:
                  type: string
                  format: email
                  example: ataur@gmail.com
                password:
                  type: string
                  format: password
                  example: 12345678
              required:
                - firstName
                - lastName
                - email
                - password
      responses:
        "201":
          description: Signup successful
          content:
            "application/json":
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Account created successfully
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/auth/signin":
    post:
      description: Login to your account
      tags:
        - Auth
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: admin@example.com
                password:
                  type: string
                  format: password
                  example: 12345677
              required:
                - email
                - password
      responses:
        "200":
          description: Sign in successfully
          content:
            "application/json":
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/auth/forget-password":
    post:
      tags:
        - Auth
      description: Forget password request
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: ataur@example.com
              required:
                - email
      responses:
        "200":
          $ref: "#/components/responses/simple200"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/auth/reset-password":
    post:
      description: Reset Password request
      tags:
        - Auth
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: 1234567788
                confirmPassword:
                  type: string
                  example: 1234567788
      parameters:
        - in: header
          name: requestId
          description: an mail will send to user email with a token included url.
          schema:
            type: string
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

      responses:
        "200":
          $ref: "#/components/responses/simple200"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/user/update-profile":
    patch:
      tags:
        - User
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          $ref: "#/components/responses/simple200"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/user/change_password":
    patch:
      tags:
        - User
      parameters:
        - in: header
          name: authorization
          schema:
            type: string
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: oldPassword
                newPassword:
                  type: string
                  example: newPassword
              required:
                - oldPassword
                - newPassword
      responses:
        "200":
          $ref: "#/components/responses/simple200"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/setting/change-role":
    patch:
      tags:
        - Setting
      requestBody:
        description: payload for changing role
        content:
          "application/json":
            schema:
              type: object
              properties:
                newRole:
                  type: string
                  enum:
                    - admin
                    - author
                    - user
              required:
                - newRole
      responses:
        "200":
          $ref: "#/components/responses/simple200"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/setting/change-permission":
    patch:
      tags:
        - Setting
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                permissionList:
                  type: array
                  items:
                    type: string
                  example:
                    - permission 1
                    - permission 2
              required:
                - permissionList
      responses:
        "200":
          $ref: "#/components/responses/simple200"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/setting/change-account-status":
    patch:
      security:
        - bearerAuth: []
      tags:
        - Setting
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: author
      responses:
        "200":
          $ref: "#/components/responses/simple200"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/articles/create":
    post:
      tags:
        - Article
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Articles"
      responses:
        "200":
          description: Successfully created article.
          content:
            "application/json":
              schema:
                allOf:
                  - type: object
                    properties:
                      statusCode:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: Operation success
                      data:
                        type: object
                        allOf:
                          - $ref: "#/components/schemas/Articles"
                          - type: object
                            properties:
                              reactions:
                                $ref: "#/components/schemas/Reactions"
                              comments:
                                $ref: "#/components/schemas/Comments"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    "simple200":
      description: success responses
      content:
        "application/json":
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 200
              message:
                type: string
                example: Operation success
    "simple201":
      description: New document created.
      content:
        "application/json":
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 201
              message:
                type: string
                example: Operation success
    "400":
      description: Bad request
      content:
        "application/json":
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 400
              message:
                type: string
                example: Issue detected
              errorMessages:
                type: array
                items:
                  type: object
                  properties:
                    path:
                      type: string
                      example: /api/v1
                    message:
                      type: string
                      example: details of the issue
    "404":
      description: Route not found
      content:
        "application/json":
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 404
              message:
                type: string
                example: Issue detected
              errorMessages:
                type: array
                items:
                  type: object
                  properties:
                    path:
                      type: string
                      example: /api/v1/unknownRoute
                    message:
                      type: string
                      example: not found
    "500":
      description: Server error
      content:
        "application/json":
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 500
              message:
                type: string
                example: Something went wrong
              errorMessages:
                type: array
                items:
                  type: object
                  properties:
                    path:
                      type: string
                      example: ""
                    message:
                      type: string
                      example: ""
  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: Smith
        email:
          type: string
          format: email
          example: john@example.com
        image:
          type: string
          example: jpeg.jpg
    Articles:
      type: object
      properties:
        title:
          type: string
          example: This is the title of article.
        slug:
          type: string
          example: this-is-the-slug-for-article
        keywords:
          type: array
          items:
            type: string
          example:
            - tag1
            - tag2
            - tag3
        body:
          type: string
          example: This is blog content.
        thumbnail:
          type: string
          example: https://s3.aws.com/myfirstblog/124.jpg
        author:
          type: string
          example: 64a3de16cb122596c9a1b5fd
        status:
          type: string
          enum:
            - published
            - unPublished
          example: published
        category:
          type: string
          example: "react"
        meta:
          type: string
          example: this is the meta description of this article
    Reaction:
      type: object
      properties:
        count:
          type: integer
          format: int32
          example: 10
        users:
          type: array
          items:
            type: object
            properties:
              user:
                type: object
                properties:
                  id:
                    type: string
                    example: 64a3de16cb122596c9a1b5fd
    Reactions:
      type: object
      properties:
        type:
          type: string
          enum:
            - blog
            - comment
          example: blog
        love:
          $ref: "#/components/schemas/Reaction"
        like:
          $ref: "#/components/schemas/Reaction"
        unLike:
          $ref: "#/components/schemas/Reaction"
    Comments:
      type: array
      items:
        type: object
        properties:
          article_id:
            type: string
            example: 64a3de16cb122596c9a1b5fd
          comment:
            type: string
            example: this is the comment
          status:
            type: string
            enum:
              - published
              - unPublished
            example: published
          reaction:
            $ref: "#/components/schemas/Reactions"
